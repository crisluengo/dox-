#! /usr/bin/env python3

# dox++
# Copyright 2020, Cris Luengo
# Based on cldoc: Copyright 2013-2018, Jesse van den Kieboom
#
# This file is part of dox++.  dox++ is free software: you can
# redistribute it and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, version 2.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 51
# Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

import argparse
import json
import doxpp


parser = argparse.ArgumentParser(description='dox++, C++ documentation, front-end parser.')
parser.add_argument('-g', action='store_true', help='generate a default configuration file')
parser.add_argument('config_file', nargs='?', default='dox++config', help='name of the configuration file')
args = parser.parse_args()

# Generate configuration file if requested, then quit
if args.g:
    doxpp.config.generate(args.config_file)
    exit(0)

# Processing options
config = doxpp.config.read(args.config_file)

doxpp.log.setLevel(doxpp.config.get(config, 'log', 'level'))

options = {
    'code_formatting': doxpp.config.get(config, 'json', 'use typewriter font'),
    'tab_size': doxpp.config.get_int(config, 'input', 'tab size')
}

# Process files
data = doxpp.buildtree.buildtree(
    doxpp.config.get(config, 'input', 'root directory'),
    doxpp.config.get(config, 'input', 'header files'),
    doxpp.config.get(config, 'input', 'markdown files'),
    doxpp.config.get(config, 'clang', 'compiler flags'),
    doxpp.config.get(config, 'clang', 'include directories'),
    options
)

# Write JSON file
filename = doxpp.config.get(config, 'json', 'filename')
if doxpp.config.get(config, 'json', 'formatting') == 'readable':
    format = {'indent': 2}
else:
    format = {'separators': (',', ':')}
with open(filename, 'w') as output_file:
    output_file.write(json.dumps(data, **format))
