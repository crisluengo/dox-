#! /usr/bin/env python3

# dox++
# Copyright 2020, Cris Luengo
# Based on cldoc: Copyright 2013-2018, Jesse van den Kieboom
#
# This file is part of dox++.  dox++ is free software: you can
# redistribute it and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, version 2.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 51
# Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

import argparse, configparser
import json
import doxpp


def generate_config_file(filename):
    config = configparser.ConfigParser()
    config['input'] = {
        'root directory': '.',        # the include path recorded for header files will be relative to this
        'header files': '*.h *.hpp',  # do give a path here, relative to working directory, for example: '*.h lib/*.h'
        'markdown files': '*.md',     # additional files to read
        'tab size': '4'               # size of a TAB character
    }
    config['output'] = {
        'filename': 'dox++out.json',
        'use typewriter font': 'no',  # 'yes' or 'no', the Markdown output uses backticks (code formatting) around type names
        'log level': 'warning'        # 'error', 'warning', 'info' or 'debug'
    }
    config['clang'] = {
        'compiler flags': '',         # could be '-std=c++11', for example
        'include directories': '',    # make these space-separated
    }
    with open(filename, 'w') as configfile:
        configfile.write('# Default dox++ configuration file\n')
        config.write(configfile)

# Main

parser = argparse.ArgumentParser(description='Clang based documentation generator.')
parser.add_argument('-g', action='store_true', help='generate a default configuration file')
parser.add_argument('config_file', nargs='?', default='dox++config', help='name of the configuration file')
args = parser.parse_args()

# Generate configuration file if requested, then quit
if args.g:
    generate_config_file(args.config_file)
    exit(0)

# Read configuration file, ensure all sections are present
config = configparser.ConfigParser()
config.read(args.config_file)
if not 'input' in config:
    config['input'] = {}
if not 'output' in config:
    config['output'] = {}
if not 'clang' in config:
    config['clang'] = {}

doxpp.log.setLevel(config['output'].get('log level', 'warning'))  # the default value

options = {
    'code_formatting': config['output'].get('use typewriter font', 'no'),
    'tab_size': int(config['input'].get('tab size','4'))
}

data = doxpp.buildtree.buildtree(
    config['input'].get('root directory', '.'),
    config['input'].get('header files', '*.h *.hpp'),
    config['input'].get('markdown files', '*.md'),
    config['clang'].get('compiler flags', ''),
    config['clang'].get('include directories', ''),
    options
)

filename = config['output'].get('filename', 'dox++out.json')
with open(filename, 'w') as output_file:
    output_file.write(json.dumps(data))
